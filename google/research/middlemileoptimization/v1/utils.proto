// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.research.middlemileoptimization.v1;

import "google/type/datetime.proto";

option go_package = "google.golang.org/genproto/googleapis/research/middlemileoptimization/v1;middlemileoptimization";
option java_multiple_files = true;
option java_outer_classname = "UtilsProto";
option java_package = "com.google.research.middlemileoptimization.v1";

// Range of times between two DateTime. For a pointwise date time, use
// start == end.
//
// google/type/interval.proto serves a similar purpose, but with physical time
// (we only care about civil time).
message DateTimeRange {
  // Start of the range.
  google.type.DateTime first_date = 1;

  // End of the range
  google.type.DateTime last_date = 2;
}

// Range of integers.
message IntegerRange {
  // Interval open if unset.
  optional int32 start_value = 1;

  // Interval open if unset.
  optional int32 end_value = 2;
}

// Function of one argument.
message Function1D {
  // The unity of the argument of the function is supposed to be:
  // - if a weight: kg
  // - if a time: min
  // - if a number of pallets: 1
  oneof function {
    // The function is a constant.
    double constant = 1;

    // The function is piecewise linear.
    PieceWiseAffineFunction pwl = 2;
  }
}

// Function of N arguments expressed as a sum of functions of one argument.
message SeparableNDFunction {
  // Components of the function, with one entry per argument/dimension.
  map<string, Function1D> components = 1;

  // Constant part of the function.
  double constant_price = 2;
}

// Piecewise-linear function, limited to one argument.
// Design similar to
// https://github.com/google/or-tools/blob/stable/ortools/util/piecewise_linear_function.h
message PieceWiseAffineFunction {
  // Linear segments of the function.
  repeated PieceWiseAffineSegment segments = 1;
}

// One segment of a piecewise-linear function.
message PieceWiseAffineSegment {
  // Beginning of the segment: x.
  double start_x = 1;

  // Beginning of the segment: y.
  double start_y = 2;

  // End of the segment: x.
  double end_x = 3;

  // End of the segment: y.
  double end_y = 4;
}
